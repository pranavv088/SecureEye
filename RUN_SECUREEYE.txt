================================================================================
                           SECUREEYE PROJECT RUN GUIDE
================================================================================

üéØ SecureEye - AI-Powered Surveillance System
üìÖ Created: $(Get-Date)
üìã Status: PRODUCTION READY ‚úÖ

================================================================================
                                OVERVIEW
================================================================================

SecureEye is a complete AI-powered surveillance system with:
- Real-time camera monitoring
- Zone-based motion detection
- AI-powered threat detection (Fire, Violence, Crowd)
- WebSocket communication for real-time alerts
- Firebase integration for data storage
- Modern web interface

================================================================================
                              PREREQUISITES
================================================================================

REQUIRED SOFTWARE:
‚úÖ Python 3.8+ (Download from: https://python.org)
‚úÖ Modern Web Browser (Chrome, Firefox, Edge, Safari)
‚úÖ Camera Device (USB webcam or IP camera)
‚úÖ Internet Connection (for Firebase)

OPTIONAL SOFTWARE:
üîß Node.js 16+ (for additional tools)
üîß VS Code with Live Server extension

================================================================================
                              QUICK START
================================================================================

üöÄ FASTEST WAY TO RUN SECUREEYE:

1. Open Command Prompt/Terminal in project folder
2. Run: python start.py
3. Wait for servers to start (3-5 seconds)
4. Open browser: http://localhost:8000/home.html

That's it! SecureEye is now running.

================================================================================
                              MANUAL SETUP
================================================================================

STEP 1: BACKEND SETUP
---------------------

Windows Users:
1. Open Command Prompt
2. Navigate to backend folder: cd backend
3. Run setup: setup.bat
4. Wait for installation to complete

Linux/Mac Users:
1. Open Terminal
2. Navigate to backend folder: cd backend
3. Make script executable: chmod +x setup.sh
4. Run setup: ./setup.sh
5. Wait for installation to complete

STEP 2: FIREBASE CONFIGURATION (OPTIONAL)
------------------------------------------

Firebase is optional - SecureEye works without it!

If you want Firebase features:
1. Go to: https://console.firebase.google.com
2. Select project: eye-61167
3. Go to Project Settings ‚Üí Service Accounts
4. Click "Generate new private key"
5. Download the JSON file
6. Replace backend/firebase-service-account.json
7. Update backend/.env with your credentials

STEP 3: START SERVERS
---------------------

Method 1 - Automatic (Recommended):
- Run: python start.py

Method 2 - Manual:
Terminal 1 (Backend):
- cd backend
- venv\Scripts\activate.bat (Windows)
- source venv/bin/activate (Linux/Mac)
- python app.py

Terminal 2 (Frontend):
- python -m http.server 8000

================================================================================
                              ACCESS URLS
================================================================================

üåê MAIN INTERFACES:
- Dashboard: http://localhost:8000/home.html
- Test Page: http://localhost:8000/test.html
- Debug Console: http://localhost:8000/debug.html

üîß ADDITIONAL PAGES:
- Landing: http://localhost:8000/landing.html
- Login: http://localhost:8000/login.html
- Signup: http://localhost:8000/signup.html
- Profile: http://localhost:8000/profile.html
- Settings: http://localhost:8000/settings.html
- Status: http://localhost:8000/status.html

================================================================================
                              FEATURES
================================================================================

üéØ CORE FEATURES:
‚úÖ Zone-based Motion Detection
‚úÖ Real-time Camera Monitoring
‚úÖ AI Threat Detection (Fire, Violence, Crowd)
‚úÖ WebSocket Communication
‚úÖ Audio Alerts (Beep sounds)
‚úÖ Event Logging
‚úÖ Responsive Web Interface

üîß TECHNICAL FEATURES:
‚úÖ Flask Backend API
‚úÖ WebSocket Server
‚úÖ OpenCV Computer Vision
‚úÖ TensorFlow AI Models
‚úÖ Firebase Integration
‚úÖ Modern JavaScript Frontend

================================================================================
                              USAGE GUIDE
================================================================================

1. CAMERA SETUP:
   - Connect USB webcam or configure IP camera
   - Allow camera permissions when prompted
   - Camera will appear in dashboard

2. ZONE CONFIGURATION:
   - Click "Add Zone" in dashboard
   - Draw detection area on camera feed
   - Set detection sensitivity
   - Save zone configuration

3. MOTION DETECTION:
   - Click "Start Detection" for active zones
   - System monitors only defined zones
   - Alerts appear with beep sounds
   - Events logged in activity feed

4. AI DETECTION:
   - Fire Detection: Color-based analysis
   - Violence Detection: Rapid motion analysis
   - Crowd Detection: Edge density analysis
   - Adjust thresholds in settings

================================================================================
                              CONFIGURATION
================================================================================

BACKEND CONFIGURATION (backend/.env):
------------------------------------
SECRET_KEY=your-super-secret-key-here
FIREBASE_PROJECT_ID=eye-61167
DETECTION_THRESHOLD=0.7
MOTION_THRESHOLD=500
FIRE_THRESHOLD=0.01
VIOLENCE_THRESHOLD=0.1
CROWD_THRESHOLD=0.15
HOST=0.0.0.0
PORT=5000
DEBUG=False (for production)

FRONTEND CONFIGURATION:
-----------------------
- Firebase config in: firebase-config.js
- Notification settings in: js/notification-service.js
- Database service in: js/firestore-service.js

================================================================================
                              API ENDPOINTS
================================================================================

BACKEND API:
- GET /api/health - Health check
- GET /api/cameras - List active cameras
- POST /api/cameras - Add new camera
- DELETE /api/cameras/<id> - Remove camera

WEBSOCKET EVENTS:
- start_detection - Start AI detection
- stop_detection - Stop AI detection
- detection_alert - Receive alerts
- camera_status - Camera status updates

================================================================================
                              TROUBLESHOOTING
================================================================================

COMMON ISSUES:

1. CAMERA NOT WORKING:
   ‚úÖ Check camera permissions in browser
   ‚úÖ Ensure camera not used by another app
   ‚úÖ Try refreshing the page
   ‚úÖ Check camera connection

2. BACKEND CONNECTION FAILED:
   ‚úÖ Ensure backend running on port 5000
   ‚úÖ Check firewall settings
   ‚úÖ Verify WebSocket connection
   ‚úÖ Check backend logs

3. FIREBASE ISSUES:
   ‚úÖ Firebase is optional - app works without it
   ‚úÖ Check Firebase project configuration
   ‚úÖ Verify service account credentials
   ‚úÖ Ensure Authentication enabled

4. AI DETECTION NOT WORKING:
   ‚úÖ Check camera feed quality
   ‚úÖ Adjust detection sensitivity
   ‚úÖ Ensure good lighting conditions
   ‚úÖ Check AI model files

5. DEPENDENCY ISSUES:
   ‚úÖ Run setup script again
   ‚úÖ Check Python version (3.8+)
   ‚úÖ Verify virtual environment
   ‚úÖ Reinstall requirements.txt

================================================================================
                              PROJECT STRUCTURE
================================================================================

SecureEye/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ app.py                    # Main backend server
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt           # Python dependencies
‚îÇ   ‚îú‚îÄ‚îÄ venv/                     # Virtual environment
‚îÇ   ‚îú‚îÄ‚îÄ models/                   # AI model files
‚îÇ   ‚îú‚îÄ‚îÄ logs/                     # Log files
‚îÇ   ‚îú‚îÄ‚îÄ data/                     # Data storage
‚îÇ   ‚îú‚îÄ‚îÄ setup.bat                 # Windows setup script
‚îÇ   ‚îî‚îÄ‚îÄ setup.sh                  # Linux/Mac setup script
‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îú‚îÄ‚îÄ firebase-config.js        # Firebase configuration
‚îÇ   ‚îú‚îÄ‚îÄ firestore-service.js      # Database service
‚îÇ   ‚îî‚îÄ‚îÄ notification-service.js   # Notification service
‚îú‚îÄ‚îÄ home.html                     # Main dashboard
‚îú‚îÄ‚îÄ test.html                     # Test page
‚îú‚îÄ‚îÄ debug.html                    # Debug console
‚îú‚îÄ‚îÄ start.py                      # Production startup script
‚îú‚îÄ‚îÄ RUN_SECUREEYE.txt            # This file
‚îî‚îÄ‚îÄ README.md                     # Project documentation

================================================================================
                              PRODUCTION NOTES
================================================================================

PRODUCTION READY FEATURES:
‚úÖ Clean codebase with no temporary files
‚úÖ Debug mode disabled for production
‚úÖ Graceful error handling
‚úÖ Firebase optional (graceful fallback)
‚úÖ Minimal startup logging
‚úÖ Professional interface

SECURITY CONSIDERATIONS:
üîí Configure Firestore security rules
üîí Use HTTPS in production
üîí Keep service account keys secure
üîí Monitor camera permissions
üîí Regular security updates

PERFORMANCE OPTIMIZATION:
‚ö° Use production WSGI server (Gunicorn)
‚ö° Configure reverse proxy (Nginx)
‚ö° Enable gzip compression
‚ö° Use CDN for static assets
‚ö° Monitor resource usage

================================================================================
                              SUPPORT & HELP
================================================================================

FOR ISSUES:
1. Check troubleshooting section above
2. Review browser console for errors
3. Check backend logs in backend/logs/
4. Verify network connectivity
5. Test with different browsers

DOCUMENTATION:
- README.md - Project overview
- SETUP_GUIDE.md - Detailed setup instructions
- PRODUCTION_CONFIG.md - Production configuration
- TROUBLESHOOTING.md - Common issues and solutions

================================================================================
                              QUICK COMMANDS
================================================================================

START SECUREEYE:
python start.py

MANUAL BACKEND START:
cd backend
venv\Scripts\activate.bat
python app.py

MANUAL FRONTEND START:
python -m http.server 8000

SETUP BACKEND (Windows):
cd backend
setup.bat

SETUP BACKEND (Linux/Mac):
cd backend
chmod +x setup.sh
./setup.sh

STOP SERVERS:
Press Ctrl+C in terminal

================================================================================
                              FINAL NOTES
================================================================================

üéâ SecureEye is now ready to use!

The system provides:
- Professional surveillance capabilities
- AI-powered threat detection
- Real-time monitoring and alerts
- Modern web interface
- Production-ready deployment

For the best experience:
- Use Chrome or Firefox browser
- Ensure good camera quality
- Configure detection zones properly
- Monitor system performance

Status: ‚úÖ PRODUCTION READY
Last Updated: $(Get-Date)

================================================================================
                              END OF GUIDE
================================================================================
